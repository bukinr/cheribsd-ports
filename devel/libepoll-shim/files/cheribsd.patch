diff --git external/microatf/cmake/ATFTest.cmake external/microatf/cmake/ATFTest.cmake
index 75905da..88b5bcd 100644
--- external/microatf/cmake/ATFTest.cmake
+++ external/microatf/cmake/ATFTest.cmake
@@ -16,6 +16,11 @@ function(atf_discover_tests _target)
     TARGET "${_target}"
     PROPERTY CROSSCOMPILING_EMULATOR)
 
+  if(CMAKE_CROSSCOMPILING AND NOT _test_executor)
+    message(WARNING "Cannot detect tests for ${_target} without CROSSCOMPILING_EMULATOR")
+    return()
+  endif()
+
   add_custom_command(
     TARGET ${_target}
     POST_BUILD
diff --git external/microatf/src/atf-c.c external/microatf/src/atf-c.c
index 05aae58..4b41c5e 100644
--- external/microatf/src/atf-c.c
+++ external/microatf/src/atf-c.c
@@ -76,14 +76,16 @@ static microatf_context_t microatf_context_static;
 static microatf_context_t *microatf_context = &microatf_context_static;
 
 struct atf_tc_impl_s_ {
+	size_t variables_size;
+	size_t config_variables_size;
 	char const *variables_key[128];
 	char const *variables_value[128];
-	size_t variables_size;
 	char const *config_variables_key[128];
 	char const *config_variables_value[128];
-	size_t config_variables_size;
 	STAILQ_ENTRY(atf_tc_s) entries;
 };
+_Static_assert(sizeof(atf_tc_t) - offsetof(atf_tc_t, impl_space_) >=
+    sizeof(struct atf_tc_impl_s_), "struct atf_tc_s is too small");
 
 atf_error_t
 atf_tc_set_md_var(atf_tc_t *tc, char const *key, char const *value, ...)
diff --git external/microatf/src/atf-c.h external/microatf/src/atf-c.h
index b9e0f5f..27afdb7 100644
--- external/microatf/src/atf-c.h
+++ external/microatf/src/atf-c.h
@@ -36,12 +36,13 @@ typedef struct atf_tc_s atf_tc_t;
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wpragmas"
 #pragma GCC diagnostic ignored "-Wpedantic"
+#define ATF_IMPL_SIZE (2 * sizeof(size_t) + 513 * sizeof(void*))
 struct atf_tc_s {
-	MICROATF_ALIGNAS(8192) char const *name;
+	char const *name;
 	void (*head)(atf_tc_t *);
 	void (*body)(atf_tc_t const *);
 	struct atf_tc_impl_s_ *impl_;
-	MICROATF_ALIGNAS(max_align_t) unsigned char impl_space_[];
+	MICROATF_ALIGNAS(max_align_t) unsigned char impl_space_[ATF_IMPL_SIZE];
 };
 #pragma GCC diagnostic pop
 
@@ -143,6 +144,7 @@ void atf_tc_skip(const char *reason, ...);
 		NULL,                                          \
 		microatf_tc_##tc##_body,                       \
 		NULL,                                          \
+		{}                                             \
 	}
 
 #define ATF_TC(tc)                                             \
@@ -153,6 +155,7 @@ void atf_tc_skip(const char *reason, ...);
 		microatf_tc_##tc##_head,                       \
 		microatf_tc_##tc##_body,                       \
 		NULL,                                          \
+		{}                                             \
 	}
 
 #define ATF_TC_HEAD(tc, tcptr)               \
diff --git include/sys/epoll.h include/sys/epoll.h
index 89a8068..236cf2b 100644
--- include/sys/epoll.h
+++ include/sys/epoll.h
@@ -26,7 +26,11 @@ enum EPOLL_EVENTS { __EPOLL_DUMMY };
 #define EPOLLMSG 0x400
 #define EPOLLERR 0x008
 #define EPOLLHUP 0x010
+#ifdef __FreeBSD__
+#define EPOLLRDHUP 0x4000
+#else
 #define EPOLLRDHUP 0x2000
+#endif
 #define EPOLLEXCLUSIVE (1U << 28)
 #define EPOLLWAKEUP (1U << 29)
 #define EPOLLONESHOT (1U << 30)
diff --git src/compat_kqueue1.c src/compat_kqueue1.c
index 6d44e47..fe75da0 100644
--- src/compat_kqueue1.c
+++ src/compat_kqueue1.c
@@ -32,7 +32,7 @@ compat_kqueue1_impl(int *fd_out, int flags)
 		int r;
 
 		if (flags & O_CLOEXEC) {
-			if ((r = real_fcntl(fd, F_GETFD)) < 0 ||
+			if ((r = real_fcntl(fd, F_GETFD, 0)) < 0 ||
 			    real_fcntl(fd, F_SETFD, r | FD_CLOEXEC) < 0) {
 				ec = errno;
 				goto out;
@@ -40,7 +40,7 @@ compat_kqueue1_impl(int *fd_out, int flags)
 		}
 
 		if (flags & O_NONBLOCK) {
-			if ((r = real_fcntl(fd, F_GETFL)) < 0) {
+			if ((r = real_fcntl(fd, F_GETFL, 0)) < 0) {
 				ec = errno;
 				goto out;
 			}
diff --git src/epoll.c src/epoll.c
index 211251c..07fe317 100644
--- src/epoll.c
+++ src/epoll.c
@@ -18,6 +18,18 @@
 #include "timespec_util.h"
 #include "wrap.h"
 
+_Static_assert(POLLIN == EPOLLIN, "");
+_Static_assert(POLLPRI == EPOLLPRI, "");
+_Static_assert(POLLOUT == EPOLLOUT, "");
+_Static_assert(POLLERR == EPOLLERR, "");
+_Static_assert(POLLHUP == EPOLLHUP, "");
+#ifdef EPOLLNVAL
+_Static_assert(POLLNVAL == EPOLLNVAL, "");
+#endif
+#ifdef POLLRDHUP
+_Static_assert(POLLRDHUP == EPOLLRDHUP, "");
+#endif
+
 void epollfd_lock(FileDescription *desc);
 void epollfd_unlock(FileDescription *desc);
 void epollfd_remove_fd(FileDescription *desc, int kq, int fd);
diff --git src/epoll_shim_ctx.c src/epoll_shim_ctx.c
index 04359af..d8bdec8 100644
--- src/epoll_shim_ctx.c
+++ src/epoll_shim_ctx.c
@@ -789,6 +789,55 @@ epoll_shim_ppoll(struct pollfd *fds, nfds_t nfds, struct timespec const *tmo_p,
 	ERRNO_RETURN(ec, -1, n);
 }
 
+EPOLL_SHIM_EXPORT
+intptr_t
+epoll_shim_fcntl_optional_arg(int cmd, va_list ap)
+{
+	intptr_t arg;
+	/*
+	 * fcntl() abuses C variadic arguments to implement optional parameters.
+	 * We want to forward this argument to the real fcntl() call, but doing
+	 * so is non-portable. On most architectures, we can just read an
+	 * intptr_t/void* and this will give us a (semi-)valid result even if
+	 * no argument/an int was passed instead since va_arg() will generally
+	 * read the next argument register or arbitrary data from the stack.
+	 *
+	 * On CHERI-enabled architectures, variadic arguments are tightly
+	 * bounded, which means that reading a void* if an int was passed will
+	 * result in a runtime trap. This switch ensures that we read the
+	 * correct number of bytes from the variadic arguments.
+	 * This ugly workaround would not be needed if a vfcntl() call taking
+	 * a va_list existed, or if fcntl just took an intptr_t argument.
+	 */
+#if defined(__FreeBSD__) && defined(__CHERI_PURE_CAPABILITY__)
+	/* Copied from lib/libc/sys/fcntl.c in the CheriBSD source tree. */
+	switch (cmd) {
+	case F_GETLK:
+	case F_SETLK:
+	case F_SETLKW:
+	case F_KINFO:
+		arg = va_arg(ap, intptr_t);
+		break;
+
+	case F_GETFD:
+	case F_GETFL:
+	case F_GETOWN:
+	case F_GET_SEALS:
+	case F_ISUNIONSTACK:
+		arg = 0;
+		break;
+
+	default:
+		arg = va_arg(ap, int);
+		break;
+	}
+#else
+	/* Not a CHERI-enabled system, reading an intptr_t will just "work". */
+	arg = va_arg(ap, intptr_t);
+#endif
+	return arg;
+}
+
 EPOLL_SHIM_EXPORT
 int
 epoll_shim_fcntl(int fd, int cmd, ...)
@@ -798,23 +847,20 @@ epoll_shim_fcntl(int fd, int cmd, ...)
 	EpollShimCtx *epoll_shim_ctx;
 	FileDescription *desc;
 	va_list ap;
+	intptr_t arg;
+
+	va_start(ap, cmd);
+	arg = epoll_shim_fcntl_optional_arg(cmd, ap);
+	va_end(ap);
 
 	if (fd < 0 || cmd != F_SETFL ||
 	    epoll_shim_ctx_global(&epoll_shim_ctx) != 0 ||
 	    (desc = epoll_shim_ctx_find_desc(epoll_shim_ctx, fd)) == NULL) {
-		va_start(ap, cmd);
-		void *arg = va_arg(ap, void *);
-		va_end(ap);
-
 		ERRNO_RETURN(0, -1, real_fcntl(fd, cmd, arg));
 	}
 
 	errno_t ec;
 
-	va_start(ap, cmd);
-	int arg = va_arg(ap, int);
-	va_end(ap);
-
 	(void)pthread_mutex_lock(&desc->mutex);
 	{
 		int opt = (arg & O_NONBLOCK) ? 1 : 0;
@@ -822,7 +868,7 @@ epoll_shim_fcntl(int fd, int cmd, ...)
 		ec = (ec == ENOTTY) ? 0 : ec;
 
 		if (ec == 0) {
-			desc->flags = arg & O_NONBLOCK;
+			desc->flags = (int)arg & O_NONBLOCK;
 		}
 	}
 	(void)pthread_mutex_unlock(&desc->mutex);
diff --git src/epoll_shim_ctx.h src/epoll_shim_ctx.h
index 67719dc..fb9cca1 100644
--- src/epoll_shim_ctx.h
+++ src/epoll_shim_ctx.h
@@ -4,6 +4,7 @@
 #include <sys/tree.h>
 
 #include <stdatomic.h>
+#include <stdarg.h>
 
 #include <signal.h>
 #include <unistd.h>
@@ -82,6 +83,7 @@ int epoll_shim_poll(struct pollfd *, nfds_t, int);
 int epoll_shim_ppoll(struct pollfd *, nfds_t, struct timespec const *,
     sigset_t const *);
 
+intptr_t epoll_shim_fcntl_optional_arg(int cmd, va_list ap);
 int epoll_shim_fcntl(int fd, int cmd, ...);
 
 #endif
diff --git src/epoll_shim_interpose.c src/epoll_shim_interpose.c
index 76bcac2..0048be3 100644
--- src/epoll_shim_interpose.c
+++ src/epoll_shim_interpose.c
@@ -6,14 +6,7 @@
 #include <unistd.h>
 
 #include "epoll_shim_interpose_export.h"
-
-int epoll_shim_close(int fd);
-ssize_t epoll_shim_read(int fd, void *buf, size_t nbytes);
-ssize_t epoll_shim_write(int fd, void const *buf, size_t nbytes);
-int epoll_shim_poll(struct pollfd *, nfds_t, int);
-int epoll_shim_ppoll(struct pollfd *, nfds_t, struct timespec const *,
-    sigset_t const *);
-int epoll_shim_fcntl(int fd, int cmd, ...);
+#include "epoll_shim_ctx.h"
 
 EPOLL_SHIM_INTERPOSE_EXPORT
 ssize_t
@@ -61,11 +54,12 @@ int
 fcntl(int fd, int cmd, ...)
 {
 	va_list ap;
+	intptr_t arg;
 
 	va_start(ap, cmd);
-	void *arg = va_arg(ap, void *);
-	int rv = epoll_shim_fcntl(fd, cmd, arg);
+	arg = epoll_shim_fcntl_optional_arg(cmd, ap);
 	va_end(ap);
+	int rv = epoll_shim_fcntl(fd, cmd, arg);
 
 	return rv;
 }
diff --git src/epollfd_ctx.c src/epollfd_ctx.c
index b6528ae..7b9c23c 100644
--- src/epollfd_ctx.c
+++ src/epollfd_ctx.c
@@ -1058,7 +1058,7 @@ epollfd_ctx_add_node(EpollFDCtx *epollfd, int kq, int fd2,
 		} else {
 			fd2_node->node_type = NODE_TYPE_FIFO;
 
-			int fl = real_fcntl(fd2, F_GETFL);
+			int fl = real_fcntl(fd2, F_GETFL, 0);
 			if (fl < 0) {
 				errno_t ec = errno;
 				registered_fds_node_destroy(fd2_node);
diff --git src/timerfd_ctx.c src/timerfd_ctx.c
index 725dc2d..31acb66 100644
--- src/timerfd_ctx.c
+++ src/timerfd_ctx.c
@@ -614,7 +614,7 @@ timerfd_ctx_read(TimerFDCtx *timerfd, int kq, uint64_t *value)
 	}
 
 	bool got_kevent = false;
-	unsigned long event_ident;
+	uintptr_t event_ident;
 	{
 		struct kevent kevs[3];
 		int n = kevent(kq, NULL, 0, kevs, 3,
diff --git src/wrap.c src/wrap.c
index 760dea7..427ad7a 100644
--- src/wrap.c
+++ src/wrap.c
@@ -98,15 +98,9 @@ real_ppoll(struct pollfd fds[], nfds_t nfds,
 }
 
 int
-real_fcntl(int fd, int cmd, ...)
+real_fcntl(int fd, int cmd, intptr_t arg)
 {
 	wrap_initialize();
-	va_list ap;
-
-	va_start(ap, cmd);
-	void *arg = va_arg(ap, void *);
 	int rv = wrap.real_fcntl(fd, cmd, arg);
-	va_end(ap);
-
 	return rv;
 }
diff --git src/wrap.h src/wrap.h
index 5910d45..5528500 100644
--- src/wrap.h
+++ src/wrap.h
@@ -14,6 +14,6 @@ int real_poll(struct pollfd fds[], nfds_t nfds, int timeout);
 int real_ppoll(struct pollfd fds[], nfds_t nfds,
     struct timespec const *restrict timeout,
     sigset_t const *restrict newsigmask);
-int real_fcntl(int fd, int cmd, ...);
+int real_fcntl(int fd, int cmd, intptr_t);
 
 #endif
diff --git test/epoll-test.c test/epoll-test.c
index 598c992..f1b9740 100644
--- test/epoll-test.c
+++ test/epoll-test.c
@@ -150,22 +150,6 @@ ATF_TC_BODY_FD_LEAKCHECK(epoll__simple, tc)
 	ATF_REQUIRE_ERRNO(EINVAL, epoll_create1(42) < 0);
 }
 
-ATF_TC_WITHOUT_HEAD(epoll__poll_flags);
-ATF_TC_BODY_FD_LEAKCHECK(epoll__poll_flags, tc)
-{
-	ATF_REQUIRE(POLLIN == EPOLLIN);
-	ATF_REQUIRE(POLLPRI == EPOLLPRI);
-	ATF_REQUIRE(POLLOUT == EPOLLOUT);
-	ATF_REQUIRE(POLLERR == EPOLLERR);
-	ATF_REQUIRE(POLLHUP == EPOLLHUP);
-#ifdef EPOLLNVAL
-	ATF_REQUIRE(POLLNVAL == EPOLLNVAL);
-#endif
-#ifdef POLLRDHUP
-	ATF_REQUIRE(POLLRDHUP == EPOLLRDHUP);
-#endif
-}
-
 ATF_TC_WITHOUT_HEAD(epoll__leakcheck);
 ATF_TC_BODY_FD_LEAKCHECK(epoll__leakcheck, tc)
 {
@@ -333,7 +317,12 @@ ATF_TC_BODY_FD_LEAKCHECK(epoll__event_size, tc)
 	struct epoll_event event;
 	// this check works on 32bit _and_ 64bit, since
 	// sizeof(epoll_event) == sizeof(uint32_t) + sizeof(uint64_t)
+#if __SIZEOF_POINTER__ <= 8
 	ATF_REQUIRE(sizeof(event) == 12);
+#else
+	/* On systems with 128-bit pointers, it will be padded to 32 bytes */
+	ATF_REQUIRE(sizeof(event) == 2 * sizeof(void*));
+#endif
 }
 
 ATF_TC_WITHOUT_HEAD(epoll__recursive_register);
@@ -1185,7 +1174,9 @@ ATF_TC_BODY_FD_LEAKCHECK(epoll__epollpri, tcptr)
 	fd_tcp_socket(fds);
 
 	ATF_REQUIRE(fcntl(fds[0], F_SETFL, O_NONBLOCK) == 0);
+	ATF_REQUIRE(fcntl(fds[0], F_GETFL) & O_NONBLOCK);
 	ATF_REQUIRE(fcntl(fds[1], F_SETFL, O_NONBLOCK) == 0);
+	ATF_REQUIRE(fcntl(fds[1], F_GETFL) & O_NONBLOCK);
 
 	int ep = epoll_create1(EPOLL_CLOEXEC);
 	ATF_REQUIRE(ep >= 0);
@@ -2064,7 +2055,6 @@ ATF_TC_BODY_FD_LEAKCHECK(epoll__fcntl_fl, tcptr)
 ATF_TP_ADD_TCS(tp)
 {
 	ATF_TP_ADD_TC(tp, epoll__simple);
-	ATF_TP_ADD_TC(tp, epoll__poll_flags);
 	ATF_TP_ADD_TC(tp, epoll__leakcheck);
 	ATF_TP_ADD_TC(tp, epoll__fd_exhaustion);
 	ATF_TP_ADD_TC(tp, epoll__invalid_op);
diff --git test/timerfd-test.c test/timerfd-test.c
index 116f7c6..e29e9db 100644
--- test/timerfd-test.c
+++ test/timerfd-test.c
@@ -900,6 +900,7 @@ ATF_TC_BODY_FD_LEAKCHECK(timerfd__short_evfilt_timer_timeout, tc)
 ATF_TC_WITHOUT_HEAD(timerfd__unmodified_errno);
 ATF_TC_BODY_FD_LEAKCHECK(timerfd__unmodified_errno, tc)
 {
+	ATF_REQUIRE(errno == 0);
 	int timerfd = timerfd_create(CLOCK_MONOTONIC, /**/
 	    TFD_CLOEXEC | TFD_NONBLOCK);
 	ATF_REQUIRE(timerfd >= 0);
@@ -911,6 +912,7 @@ ATF_TC_BODY_FD_LEAKCHECK(timerfd__unmodified_errno, tc)
 			    .it_value.tv_nsec = 100000000,
 			},
 			NULL) == 0);
+	ATF_REQUIRE(errno == 0);
 	(void)wait_for_timerfd(timerfd);
 	ATF_REQUIRE(errno == 0);
 
@@ -937,6 +939,7 @@ ATF_TC_BODY_FD_LEAKCHECK(timerfd__unmodified_errno, tc)
 ATF_TC_WITHOUT_HEAD(timerfd__reset_to_very_long);
 ATF_TC_BODY_FD_LEAKCHECK(timerfd__reset_to_very_long, tc)
 {
+	ATF_REQUIRE(errno == 0);
 	int timerfd = timerfd_create(CLOCK_MONOTONIC, /**/
 	    TFD_CLOEXEC | TFD_NONBLOCK);
 	ATF_REQUIRE(timerfd >= 0);
diff --git a/external/tree-macros/include/sys/tree.h b/external/tree-macros/include/sys/tree.h
index eb5f244..6480540 100644
--- external/tree-macros/include/sys/tree.h
+++ external/tree-macros/include/sys/tree.h
@@ -348,8 +348,8 @@ struct {								\
 #define RB_EMPTY(head)			(RB_ROOT(head) == NULL)
 
 #define RB_SET_PARENT(dst, src, field) do {				\
-	RB_BITS(dst, field) &= RB_RED_MASK;				\
-	RB_BITS(dst, field) |= (__uintptr_t)src;			\
+	RB_BITS(dst, field) = (__uintptr_t)src |			\
+	    (ptraddr_t)(RB_BITS(dst, field) & RB_RED_MASK);		\
 } while (/*CONSTCOND*/ 0)
 
 #define RB_SET(elm, parent, field) do {					\
